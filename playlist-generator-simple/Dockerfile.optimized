# Optimized Dockerfile for Playlist Generator Simple
# Features: multi-stage builds, dependency caching, smaller final image

# --- Dependencies stage ---
FROM python:3.7-slim-bullseye AS dependencies

# Install system dependencies for building
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    libffi-dev \
    libssl-dev \
    libasound2-dev \
    portaudio19-dev \
    python3-dev \
    libfftw3-dev \
    libtag1-dev \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install wheel for faster builds
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements first for better caching
COPY requirements.txt /tmp/requirements.txt

# Install Python dependencies with optimizations
RUN pip install --no-cache-dir \
    --index-url https://pypi.org/simple/ \
    --extra-index-url https://download.pytorch.org/whl/cpu \
    -r /tmp/requirements.txt

# --- Runtime stage ---
FROM python:3.7-slim-bullseye AS runtime

# Create non-root user for security
RUN groupadd -r playlist && useradd -r -g playlist playlist

# Install only runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ffmpeg \
    libavcodec-extra \
    libfftw3-3 \
    libtag1v5 \
    sqlite3 \
    libmagic1 \
    gosu \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from dependencies stage
COPY --from=dependencies /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code with specific order for better caching
COPY src /app/src
COPY playlista /app/playlista
COPY entrypoint.sh /app/entrypoint.sh
COPY database/playlist_generator_schema.sql /app/database/playlist_generator_schema.sql
COPY playlista.conf /app/playlista.conf

# Create directories with proper permissions
RUN mkdir -p /app/playlists /app/cache/checkpoints /app/cache/metrics /app/logs /app/music \
    && chown -R playlist:playlist /app

# Make scripts executable
RUN chmod +x /app/playlista /app/entrypoint.sh

# Set optimized environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    CACHE_DIR=/app/cache \
    MODEL_DIR=/app/feature_extraction/models \
    PROMETHEUS_MULTIPROC_DIR=/tmp \
    # Professional logging configuration
    LOG_LEVEL=INFO \
    LOG_FORMAT=json \
    LOG_DIR=/app/logs \
    LOG_CONSOLE=true \
    LOG_FILE=true \
    # TensorFlow optimizations
    TF_CPP_MIN_LOG_LEVEL=3 \
    TF_ENABLE_ONEDNN_OPTS=0 \
    CUDA_VISIBLE_DEVICES=-1 \
    # Memory optimizations
    MALLOC_TRIM_THRESHOLD_=131072 \
    MALLOC_MMAP_THRESHOLD_=131072 \
    # Python optimizations
    PYTHONHASHSEED=random \
    PYTHONHTTPSVERIFY=0

# Expose port
EXPOSE 8500

# Health check with faster intervals
HEALTHCHECK --interval=15s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8500/api/v1/health || exit 1

# Switch to non-root user
USER playlist

# Default command (API mode)
CMD ["/app/entrypoint.sh"]