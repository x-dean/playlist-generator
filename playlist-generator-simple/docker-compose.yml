services:
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: playlista-postgres
    environment:
      POSTGRES_DB: playlista
      POSTGRES_USER: playlista
      POSTGRES_PASSWORD: playlista_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    ports:
      - "5433:5432"
    volumes:
      # PostgreSQL data directory - mounted to host for persistence
      - /root/music/playlista/database:/var/lib/postgresql/data
      - ./database/postgresql_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - playlista-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U playlista -d playlista"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Playlist Generator Application
  playlist-generator:
    build: .
    container_name: playlist-generator
    ports:
      - "8501:8500"  # Original port
      - "8123:8000"  # Web API port
    volumes:
      # Music library - mount your music directory here
      - /root/music/library:/music:ro

      # Playlists output directory
      - /root/music/playlista/playlists:/app/playlists

      # Cache directory for pipeline cache only (database is PostgreSQL)
      - /root/music/playlista/cache:/app/cache

      # Logs directory
      - /root/music/playlista/logs:/app/logs

      # Models directory (for feature extraction models)
      - /root/music/playlista/models/musicnn:/app/models:ro

      # Configuration file (using local config)
      - /root/music/playlista/config/playlista.conf:/app/playlista.conf:ro
    environment:
      - PYTHONPATH=/app
      - CACHE_DIR=/app/cache

      - DOCKER_CONTAINER=true
      - FORCE_COLOR=1
      - TERM=xterm-256color
      - PYTHONUNBUFFERED=1

      # PostgreSQL configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=playlista
      - POSTGRES_USER=playlista
      - POSTGRES_PASSWORD=playlista_password
      - ENVIRONMENT=production

      # TensorFlow warning suppression
      - TF_CPP_MIN_LOG_LEVEL=3
      - TF_ENABLE_ONEDNN_OPTS=0
      - TF_GPU_ALLOCATOR=cpu
      - CUDA_VISIBLE_DEVICES=-1

      # External API keys (set these in your .env file)
      - LASTFM_API_KEY=${LASTFM_API_KEY:-dummy_key_to_suppress_warnings}
      
      # MusiCNN model paths (Docker internal)
      - MUSICNN_MODEL_PATH=/app/models/msd-musicnn-1.pb
      - MUSICNN_JSON_PATH=/app/models/msd-musicnn-1.json
    command: ["/app/entrypoint.sh"]
    restart: unless-stopped
    working_dir: /app
    tty: true
    stdin_open: true
    networks:
      - playlista-network
    depends_on:
      postgres:
        condition: service_healthy

  # pgAdmin for database management (optional - use: docker-compose --profile admin up)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: playlista-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8082:80"
    volumes:
      # pgAdmin data directory - mounted to host for persistence
      - /root/music/playlista/pgadmin:/var/lib/pgadmin
    networks:
      - playlista-network
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - admin  # Optional: docker-compose --profile admin up

# No Docker volumes needed - all data is mounted to host directories

networks:
  playlista-network:
    driver: bridge